---
title: "Cross Val"
author: "Pintxos Gang"
format: html
---

```{r}
library(tidymodels)
data(ames)
head(ames)
```




```{r}
linear_fit <- function(df,as_list = FALSE, intercept = TRUE){
  y_name <- names(df)[1]
  form   <- as.formula(paste(y_name, "~ ."))
  tt     <- terms(form, data = df)          
  mf     <- model.frame(tt, data = df)      
  X      <- model.matrix(tt, data = mf)   
  y      <- model.response(mf)

  beta <- solve(t(X) %*% X) %*% t(X) %*% y  
                          
   names(beta) <- colnames(X)
  if (!intercept && "(Intercept)" %in% names(beta)) {
    beta <- beta[names(beta) != "(Intercept)"]
  }
  if (as_list) {
    
    return(as.list(beta))
  }
  
  class(beta) <- c("lfcoef", "numeric")
  attr(beta, "terms") <- tt
  beta

}

```






```{r}
lm(Sale_Price ~ Lot_Area + Year_Built, data=ames)
df <- ames %>%
  dplyr::select(c(Sale_Price, Lot_Area, Year_Built))
linear_fit(df)
```

```{r}
try_many_models <- function(df, model_specs) {
  results <- list()
  
  for (i in seq_along(model_specs)) {
    predictors <- model_specs[[i]]
    model_df <- df[, c(names(df)[1], predictors), drop = FALSE]
    results[[i]] <- linear_fit(model_df)
  }
  
  return(results)
}
```

```{r}
models <- list(c("Lot_Area"), 
               c("Lot_Area", "Year_Built"), 
               c("Lot_Area", "TotRms_AbvGrd"),
               c("Lot_Area", "Year_Built", "TotRms_AbvGrd"))
df <- ames %>% dplyr::select("Sale_Price", "Lot_Area", "Year_Built", "TotRms_AbvGrd")
try_many_models(df, models)
```



```{r}
tune_model_split <- function(df_train, df_test, models, metric="adjusted_r2") {
  estimators <- try_many_models(df_train, models)
  n <- nrow(df_test)

  metric_vals <- sapply(seq_along(estimators), function(i) {
    beta_vec <- estimators[[i]]
    tt_train <- attr(beta_vec, "terms")                 

    Y_test <- as.matrix(df_test[,1, drop=FALSE])
    X_test <- model.matrix(tt_train, data = df_test)    

    Y_hat <- X_test %*% beta_vec
    k <- length(beta_vec)

    resid <- Y_test - Y_hat
    rss <- sum(resid^2)

    if (metric == "adjusted_r2") {
      tss <- sum((Y_test - mean(Y_test))^2)
      r2 <- 1 - rss / tss
      1 - (1 - r2) * (n - 1) / (n - k)
    } else if (metric == "AIC") {
      n * log(rss / n) + 2 * k
    } else if (metric == "BIC") {
      n * log(rss / n) + k * log(n)
    } else {
      stop("Invalid metric.")
    }
  })

  model_strings <- sapply(models, function(preds) paste(preds, collapse=", "))
  out <- data.frame(model_predictors = model_strings)
  out[[metric]] <- metric_vals
  out
}

```








```{r}
df <- ames %>% dplyr::select("Sale_Price", "Lot_Area", "Year_Built", "TotRms_AbvGrd")

n <- nrow(df)
n_train <- floor(n*0.8)
train_indices <- sample(1:n, size=n_train, replace=FALSE)
test_indices <- setdiff(1:n, train_indices)

df_train <- df[train_indices, ]
df_test <- df[train_indices, ]

models <- list(c("Lot_Area"), 
               c("Lot_Area", "Year_Built"), 
               c("Lot_Area", "TotRms_AbvGrd"),
               c("Lot_Area", "Year_Built", "TotRms_AbvGrd"))
tune_model_split(df_train, df_test, models)
```

```{r}
tune_model_cv <- function(df, models, nfolds, metric="adjusted_r2") {
  
  n <- nrow(df)
  fold_indices <- sample(rep(1:nfolds, length.out=n))
  
  results_mat <- matrix(0, nrow=length(models), ncol=nfolds)
  
  for (fold in 1:nfolds) {
    test_mask <- (fold_indices == fold)
    train_mask <- !test_mask
    
    df_train <- df[train_mask, ]
    df_test <- df[test_mask, ]
    
    result <- tune_model_split(df_train, df_test, models, metric)
    
    results_mat[, fold] <- result[[metric]]
  }
  
  metric_vals <- rowMeans(results_mat)
  
  model_strings <- sapply(models, function(preds) paste(preds, collapse=", "))
  
  result <- data.frame(model_predictors=model_strings)
  result[[metric]] <- metric_vals
  
  return(result)
}
```

```{r}
df <- ames %>% dplyr::select("Sale_Price", "Lot_Area", "Year_Built", "TotRms_AbvGrd")
models <- list(c("Lot_Area"), 
               c("Lot_Area", "Year_Built"), 
               c("Lot_Area", "TotRms_AbvGrd"),
               c("Lot_Area", "Year_Built", "TotRms_AbvGrd"))

tune_model_cv(df, models, nfolds=5, metric = )
```

```{r}
linear_fit(df)
```





```{r}
df <- df_A %>% dplyr::select("AvgSales", "CollegeTF", "Month", "Category", "Population", "City", "Year")
models <- list(
  c("CollegeTF"),
  c("CollegeTF", "Month"),
  c("CollegeTF", "Category"),
  c("CollegeTF", "Month", "Category"),
  c("CollegeTF", "Population"),
  c("CollegeTF", "Month", "Population"),
  c("CollegeTF", "Category", "Population"),
  c("CollegeTF", "Month", "Category", "Population")
)



order <- tune_model_cv(df, models, nfolds=5)|>
  arrange(desc(adjusted_r2))
order
```


```{r}
df_A|>
  select(-c("City"))
mod <- lm(AvgSales ~ ., data = df_A)
summary(mod)
